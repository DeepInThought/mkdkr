#!/bin/bash

_helper_instance() {
  assertEquals "$(docker inspect ${1}_${MKDKR_JOB_NAME} | jq .[0].State.Running)" true
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "container is running [ OK ]"

  assertEquals "$(docker inspect ${1}_${MKDKR_JOB_NAME} | jq .[0].Config.Cmd[0])" "${3}"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "cmd is ${3} [ OK ]"

  assertEquals "$(docker inspect ${1}_${MKDKR_JOB_NAME} | jq .[0].Config.Image)" "${2}"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "container image is ${2} [ OK ]"

  assertEquals "$(docker inspect ${1}_${MKDKR_JOB_NAME} | jq .[0].Config.Entrypoint)" 'null'
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "container entrypoint is null [ OK ]"

  assertNotNull "$(docker inspect ${1}_${MKDKR_JOB_NAME} | jq .[0].Config.WorkingDir)"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "container workdir exist [ OK ]"
}

test_mkdkr_create_instance() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="simple_instance"
  _job_uniq_name "${NAME}"

  instance: alpine

  _helper_instance "job" '"alpine"' '"sleep"'

  _job_destroy

  _pretty "light_green" "\nRan 5 assert(s)\n"
}

test_mkdkr_create_instance_job() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="simple_instance_job"
  _job_uniq_name "${NAME}"

  instance: alpine

  _helper_instance "job" '"alpine"' '"sleep"'

  _job_destroy

  _pretty "light_green" "\nRan 5 assert(s)\n"

}

test_mkdkr_create_instance_service() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="simple_instance_idempotent"
  _job_uniq_name "${NAME}"

  service: nginx

  _helper_instance "service" '"nginx"' '"nginx"'

  _job_destroy

  _pretty "light_green" "\nRan 5 assert(s)\n"
}

test_mkdkr_create_instance_privileged() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="simple_instance_privileged"
  _job_uniq_name "${NAME}"

  dind: docker:19

  _helper_instance "job" '"docker:19"' '"sleep"'

  _job_destroy

  _pretty "light_green" "\nRan 5 assert(s)\n"
}

test_mkdkr_create_instance_idempotent() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="simple_instance_idempotent"
  _job_uniq_name "${NAME}"

  instance: alpine

  _helper_instance "job" '"alpine"' '"sleep"'

  instance: debian

  _helper_instance "job" '"debian"' '"sleep"'

  _job_destroy

  echo -e "\nRan\e[36m 10 \e[0masserts."
}

test_test_mkdkr_create_service_and_job() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="my_service"
  _job_uniq_name "${NAME}"

  service: nginx

  _helper_instance "service" '"nginx"' '"nginx"'

  instance: alpine

  _helper_instance "job" '"alpine"' '"sleep"'

  _JOB_NETWORK="$(docker inspect service_${MKDKR_JOB_NAME} | jq '.[0].NetworkSettings.Networks' | jq -r 'keys[0]')"
  _SERVICE_NETWORK="$(docker inspect service_${MKDKR_JOB_NAME} | jq '.[0].NetworkSettings.Networks' | jq -r 'keys[0]')"
  _SERVICE_NETWORK_ALIAS=$(docker inspect service_${MKDKR_JOB_NAME} | jq -r '.[0].NetworkSettings.Networks["'$_SERVICE_NETWORK'"].Aliases[0]')

  assertEquals "$_JOB_NETWORK" "$_SERVICE_NETWORK"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "job and service connected at same network [ OK ]"

  assertEquals "$_SERVICE_NETWORK_ALIAS" "nginx"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "service alias name [ OK ]"

  _job_destroy

  _pretty "light_green" "\nRan 12 assert(s)\n"

}

test_test_mkdkr_create_multi_service_and_job() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME

  NAME="my_service"
  _job_uniq_name "${NAME}"

  service: nginx
  _helper_instance "service" '"nginx"' '"nginx"'

  service: httpd
  _helper_instance "service_1" '"httpd"' '"httpd-foreground"'

  service: httpd:2.4
  _helper_instance "service_2" '"httpd:2.4"' '"httpd-foreground"'

  instance: alpine

  _helper_instance "job" '"alpine"' '"sleep"'

  _JOB_NETWORK="$(docker inspect service_${MKDKR_JOB_NAME} | jq '.[0].NetworkSettings.Networks' | jq -r 'keys[0]')"
  _SERVICE_NETWORK="$(docker inspect service_${MKDKR_JOB_NAME} | jq '.[0].NetworkSettings.Networks' | jq -r 'keys[0]')"
  _SERVICE_NETWORK_ALIAS=$(docker inspect service_${MKDKR_JOB_NAME} | jq -r '.[0].NetworkSettings.Networks["'$_SERVICE_NETWORK'"].Aliases[0]')
  _SERVICE_NETWORK_1="$(docker inspect service_1_${MKDKR_JOB_NAME} | jq '.[0].NetworkSettings.Networks' | jq -r 'keys[0]')"
  _SERVICE_NETWORK_ALIAS_1=$(docker inspect service_1_${MKDKR_JOB_NAME} | jq -r '.[0].NetworkSettings.Networks["'$_SERVICE_NETWORK'"].Aliases[0]')
  _SERVICE_NETWORK_2="$(docker inspect service_2_${MKDKR_JOB_NAME} | jq '.[0].NetworkSettings.Networks' | jq -r 'keys[0]')"
  _SERVICE_NETWORK_ALIAS_2=$(docker inspect service_2_${MKDKR_JOB_NAME} | jq -r '.[0].NetworkSettings.Networks["'$_SERVICE_NETWORK'"].Aliases[0]')

  assertEquals "$_JOB_NETWORK" "$_SERVICE_NETWORK"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "job and service (nginx) connected at same network [ OK ]"

  assertEquals "$_SERVICE_NETWORK_ALIAS" "nginx"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "service (nginx) alias name [ OK ]"

  assertEquals "$_JOB_NETWORK" "$_SERVICE_NETWORK_1"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "job and service (httpd) connected at same network [ OK ]"

  assertEquals "$_SERVICE_NETWORK_ALIAS_1" "httpd"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "service (httpd) alias name [ OK ]"

  assertEquals "$_JOB_NETWORK" "$_SERVICE_NETWORK_2"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "job and service (httpd 2.4) connected at same network [ OK ]"

  assertEquals "$_SERVICE_NETWORK_ALIAS_2" "httpd_2_4"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "service (httpd 2.4) alias name [ OK ]"

  _job_destroy

  _pretty "light_green" "\nRan 26 assert(s)\n"

}

test_mkdkr_create_instance_with_parameters() {
  # shellcheck disable=SC1091
  source .mkdkr
  unset MKDKR_JOB_NAME
  unset SERVICES

  NAME="simple_instance_parameters"
  _job_uniq_name "${NAME}"

  instance: alpine \
    --cpus 1 \
    --memory 32MB \
    -e "simple=simple" \
    --env "complex=name with space" \
    --env "pre-processed=$(whoami)" \
    --env "liteal='\$(literal)'"

  _helper_instance "job" '"alpine"' '"sleep"'

  assertEquals "$(docker inspect job_${MKDKR_JOB_NAME} | jq .[0].HostConfig.NanoCpus)" "1000000000"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "cpu restriction [ OK ]"

  assertEquals "$(docker inspect job_${MKDKR_JOB_NAME} | jq .[0].HostConfig.Memory)" "33554432"
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "memory restriction [ OK ]"

  assertEquals "$(docker inspect job_${MKDKR_JOB_NAME} | jq '.[0].Config.Env | length')" 5
  [[ "$?" == "0" ]] &&
    _pretty "light_purple" "count env vars == 5 [ OK ]"

  _job_destroy

  _pretty "light_green" "\nRan 8 assert(s)\n"

}

# shellcheck disable=SC1091
. ./shunit2
